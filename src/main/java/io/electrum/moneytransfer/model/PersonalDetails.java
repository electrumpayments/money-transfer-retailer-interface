/*
 * Money Transfer Service Interface
 * The Electrum Money Transfer Service Interface is an API designed to enable retailers to integrate with multiple counter-to-counter money transfer service providers via a single interface.  The basic procedure by which a counter-to-counter money transfer occurs is as follows: 1. A customer wishing to send money to a recipient registers a profile with the service provider. 2. The sender creates an order by making a cash payment at one of the retailer's points of sale (POS). The payment is linked to a unique payout reference generated by the service provider and a sender-selected PIN. 3. The sender supplies the recipient with the payout reference and PIN. 4. The recipient redeems the order at another POS by supplying the payout reference and PIN.  This API defines a RESTful interface that supports the following functionality: * Creation and querying of customer profiles. * Order creation (a dual message pair transaction consisting of an online payment authorization followed a store-and-forward confirmation or reversal). * Order lookup. * Order redemption. (a dual message pair transaction consisting of an online redeem authorization followed by a store-and-forward confirmation or reversal).  Note that because of the requirements of different service providers, some fields that are optional according to this specification may be mandatory for certain providers. For guidelines on how to implement this API, please contact both Electrum and the relevant service provider(s). 
 *
 * OpenAPI spec version: 1.0.1
 * Contact: support@electrum.co.za
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.electrum.moneytransfer.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;

import io.electrum.moneytransfer.model.Address;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import javax.validation.constraints.*;

/**
 * Pesonal details of a customer.
 */
@ApiModel(description = "Pesonal details of a customer.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2017-10-31T09:10:54.608Z")
public class PersonalDetails   {
  @JsonProperty("firstName")
  private String firstName = null;

  @JsonProperty("lastName")
  private String lastName = null;

  @JsonProperty("address")
  private Address address = null;

  @JsonProperty("idNumber")
  private String idNumber = null;

  @JsonProperty("idType")
  private String idType = null;

  @JsonProperty("nationality")
  private String nationality = null;

  @JsonProperty("dateOfBirth")
  private String dateOfBirth = null;

  @JsonProperty("contactNumber")
  private String contactNumber = null;

  public PersonalDetails firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * The person&#39;s first name(s)
   * @return firstName
   **/
  @JsonProperty("firstName")
  @ApiModelProperty(value = "The person's first name(s)")
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  public PersonalDetails lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The person&#39;s last name
   * @return lastName
   **/
  @JsonProperty("lastName")
  @ApiModelProperty(value = "The person's last name")
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  public PersonalDetails address(Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   **/
  @JsonProperty("address")
  @ApiModelProperty(value = "")
  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }

  public PersonalDetails idNumber(String idNumber) {
    this.idNumber = idNumber;
    return this;
  }

  /**
   * The person&#39;s ID Number
   * @return idNumber
   **/
  @JsonProperty("idNumber")
  @ApiModelProperty(value = "The person's ID Number")
  public String getIdNumber() {
    return idNumber;
  }

  public void setIdNumber(String idNumber) {
    this.idNumber = idNumber;
  }

  public PersonalDetails idType(String idType) {
    this.idType = idType;
    return this;
  }

  /**
   * Type of identification document
   * @return idType
   **/
  @JsonProperty("idType")
  @ApiModelProperty(value = "Type of identification document")
  public String getIdType() {
    return idType;
  }

  public void setIdType(String idType) {
    this.idType = idType;
  }

  public PersonalDetails nationality(String nationality) {
    this.nationality = nationality;
    return this;
  }

  /**
   * Nationality expressed as an ISO Alpha-2 country code
   * @return nationality
   **/
  @JsonProperty("nationality")
  @ApiModelProperty(value = "Nationality expressed as an ISO Alpha-2 country code")
 @Size(min=2,max=2)  public String getNationality() {
    return nationality;
  }

  public void setNationality(String nationality) {
    this.nationality = nationality;
  }

  public PersonalDetails dateOfBirth(String dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

  /**
   * Date of birth
   * @return dateOfBirth
   **/
  @JsonProperty("dateOfBirth")
  @ApiModelProperty(value = "Date of birth")
  public String getDateOfBirth() {
    return dateOfBirth;
  }

  public void setDateOfBirth(String dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }

  public PersonalDetails contactNumber(String contactNumber) {
    this.contactNumber = contactNumber;
    return this;
  }

  /**
   * The person&#39;s contact number
   * @return contactNumber
   **/
  @JsonProperty("contactNumber")
  @ApiModelProperty(value = "The person's contact number")
  public String getContactNumber() {
    return contactNumber;
  }

  public void setContactNumber(String contactNumber) {
    this.contactNumber = contactNumber;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonalDetails personalDetails = (PersonalDetails) o;
    return Objects.equals(this.firstName, personalDetails.firstName) &&
        Objects.equals(this.lastName, personalDetails.lastName) &&
        Objects.equals(this.address, personalDetails.address) &&
        Objects.equals(this.idNumber, personalDetails.idNumber) &&
        Objects.equals(this.idType, personalDetails.idType) &&
        Objects.equals(this.nationality, personalDetails.nationality) &&
        Objects.equals(this.dateOfBirth, personalDetails.dateOfBirth) &&
        Objects.equals(this.contactNumber, personalDetails.contactNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstName, lastName, address, idNumber, idType, nationality, dateOfBirth, contactNumber);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonalDetails {\n");
    
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    idNumber: ").append(toIndentedString(idNumber)).append("\n");
    sb.append("    idType: ").append(toIndentedString(idType)).append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    contactNumber: ").append(toIndentedString(contactNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

